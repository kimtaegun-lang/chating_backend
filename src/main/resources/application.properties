spring.application.name=backend
server.port=${PORT:8080}

# PostgreSQL 설정 (Render.com 환경변수 사용)
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/chating}
#spring.datasource.username=${DB_USER:postgres}
#spring.datasource.password=${DB_PASSWORD:postgres}

# H2 사용 (개발 테스트용)
// spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.url=jdbc:h2:./data/testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.path=/h2-console
spring.h2.console.enabled=true
# JPA 설정
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true

# WebSocket 설정
spring.mvc.pathmatch.matching-strategy=ant-path-matcher

# 파일 업로드
spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.enabled=true

# Logging
logging.level.root=INFO
logging.level.org.springframework.web=INFO

# RabbitMQ 설정
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# STOMP 브로커 설정
logging.level.org.springframework.messaging=DEBUG
logging.level.org.springframework.web.socket=DEBUG